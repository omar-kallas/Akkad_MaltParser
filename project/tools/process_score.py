'''
This code processes the raw output of malteval for the general scores on the main experiments
The input are the files generated by malteval including the scores of parsing stored in ../../scores/raw
The output is a single files contains all the scores combined into one file stored in ../../scores/processed
'''
import os
import methods
current_path = os.path.dirname(os.path.abspath(__file__))

# This function extracts the parsing and training set names from the parsed file name
# The naming convention I used is not really good so this function is very static
# and it needs to be changed if the naming convention changes
def get_train_and_parsed(parsed_file):
    cropped = parsed_file.split("_on_")[-1]
    
    parts = cropped.split("_")
    if parts[-1][0].isdigit():
        parsed = " ".join(parts[-3:])
        train = " ".join(parts[:-3])
    else:
        parsed = parts[-1]
        train = " ".join(parts[:-1])
    
    return f"{parsed} \t{train}"

# define the input and output paths
in_path = current_path + "/../../scores/raw/main/"
out_path = current_path + "/../../scores/processed/main/"

# a list of all files in the raw scores directory
files = os.listdir(in_path)

# initialize an empty output string
output = ""

for file in files:
    
    with open(in_path + file, "r") as f:
        lines = f.readlines()
    
    n = len(lines)
    
    # the number of lines determines how many numbers we need to collect from the scores file
    # if it is more than 71, there are 5 lines starting at line 11 
    # and taking steps of 14 lines to get to the next one
    # this is static and would need to change if the output of malteval changes
    if n >= 71:
        for i in range(5):
            # the name of the parsed file associated with the scores
            parsed_file = lines[3 + 14 * i].strip().split("/")[-1] 
            
            # use the function to get the name of the training and parsing sets, add it to the output
            output += get_train_and_parsed(parsed_file) + "\t"
            # get the scores 
            output += lines[11 + 14 * i] + "\n"
    else:
        # same as the previous branche just do it once
        parsed_file = lines[3].strip().split("/")[-1]
        
        output += get_train_and_parsed(parsed_file) + "\t"
        output += lines[11] + "\n"

#create the output path if it doens't exist
methods.mkdir(out_path)

# write the output to the output file
with open(out_path + "main_scores.txt", "w") as f:
    f.write("Parsed file \ttraining set \tLabel \tUAS \tLAS \n")    # output header
    f.write(output)